{"version":3,"sources":["styles/fulid_ui/components.ts","ui/components/ListItem.tsx","ui/components/BottomFilter.tsx","ui/App.tsx","helpers/checkState.ts","reportWebVitals.ts","index.tsx"],"names":["taskItemWrapperStyle","props","root","position","height","backgroundColor","borderBottom","filterWrapperStyle","boxShadow","color","taskMessageWrapperStyle","textFieldAddStyle","width","fieldGroup","padding","field","lineHeight","taskFieldStyle","taskFieldCompletedStyle","textDecoration","taskCheckmarkStyle","checked","checkbox","borderRadius","border","checkmark","fontSize","ListItem","id","task","completed","toggleTask","upadateTask","deleteTask","useState","modify","setModify","inputVal","setInputVal","timesTouched","useRef","timer","className","Stack","String","horizontal","verticalAlign","tokens","childrenGap","styles","Checkbox","onChange","TextField","value","e","target","readOnly","onDoubleClick","onTouchEnd","isDoubleClicked","current","timerIsPresent","clearTimeout","currentTimer","setTimeout","onKeyPress","key","borderless","autoComplete","disabled","IconButton","iconProps","iconName","top","right","transform","rootHovered","onClick","BottomFilter","howMuchLeft","filterState","filterTasks","clearCompletedTasks","wrap","horizontalAlign","Text","DefaultButton","text","fontWeight","initializeIcons","App","buffer","setBuffer","tasks","setTasks","taskInput","setTaskInput","setHowMuchLeft","setFilterState","toggleAllStatus","remainedTasks","filter","index","findIndex","el","state","filteredTasks","listToCheck","map","checkState","itemsLeftCounter","toComplete","length","useEffect","variant","textAlign","title","ariaLabel","opacity","rootDisabled","allTasks","Item","align","placeholder","buttonPressed","newId","newTask","addTask","resetCompletedTasks","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e3d9102e.chunk.js","sourcesContent":["import {\n  ITextFieldStyleProps,\n  ITextFieldStyles,\n  IButtonStyles,\n  ICheckboxStyleProps,\n  ICheckboxStyles,\n  IStackProps,\n  IStackStyles,\n} from '@fluentui/react';\n\n/* Wrappers */\nexport const addTaskWrapperStyle = () => {\n  return {\n    root: { borderBottom: '1px solid #e4e4e4', width: '100%', height: '100%' },\n  };\n};\n\nexport const taskItemWrapperStyle = (\n  props: IStackProps\n): Partial<IStackStyles> => {\n  return {\n    root: {\n      position: 'relative',\n      height: '100%',\n      backgroundColor: 'white',\n      borderBottom: '1px solid grey',\n    },\n  };\n};\n\nexport const filterWrapperStyle = () => {\n  return {\n    root: {\n      backgroundColor: 'white',\n      boxShadow: '0px 2px 2px -2px grey',\n      color: 'grey',\n    },\n  };\n};\n\nexport const taskMessageWrapperStyle = () => {\n  return {\n    root: {\n      height: '100px',\n      color: '#ee5e5e',\n    },\n  };\n};\n\n/* Buttons */\nexport const btnSelectAllStyle = () => {\n  return {\n    root: { color: 'grey', backgroundColor: 'transparent', opacity: 1 },\n    rootHovered: {\n      color: '#444444',\n      backgroundColor: 'transparent',\n    },\n    rootDisabled: { backgroundColor: 'transparent' },\n  };\n};\n\nexport const btnFilterDefaultStyle = () => {\n  return {\n    root: {\n      color: 'grey',\n      fontWeight: '100',\n      border: '1px solid transparent',\n    },\n    rootHovered: { backgroundColor: 'trasparent' },\n  };\n};\nexport const btnFilterActiveStyle = () => {\n  return {\n    root: {\n      color: 'grey',\n      border: '1px solid #ec9595',\n      fontWeight: '100',\n      backgroundColor: 'white',\n      padding: '0px 10px',\n    },\n    rootHovered: {\n      backgroundColor: 'trasparent',\n    },\n  };\n};\n\nexport const btnTaskRemove = (): IButtonStyles => {\n  return {\n    root: {\n      color: '#fd5f5f',\n      position: 'absolute',\n      top: '50%',\n      right: '5%',\n      transform: 'translate(0%, -50%)',\n    },\n    rootHovered: {\n      backgroundColor: 'transparent',\n      color: 'red',\n    },\n  };\n};\n\n/* Text */\nexport const mainCaptionStyle = () => {\n  return { root: { color: 'red', textAlign: 'center' } };\n};\n\n/* Text Fields */\nexport const textFieldAddStyle = (\n  props: ITextFieldStyleProps\n): Partial<ITextFieldStyles> => {\n  return {\n    root: {\n      width: '100%',\n    },\n    fieldGroup: [\n      {\n        height: '100%',\n        padding: '10px',\n      },\n    ],\n    field: {\n      lineHeight: 1,\n      color: 'grey',\n      '::placeholder': {\n        color: 'grey',\n      },\n    },\n  };\n};\n\nexport const taskFieldStyle = (\n  props: ITextFieldStyleProps\n): Partial<ITextFieldStyles> => {\n  return {\n    root: { width: '100%' },\n    fieldGroup: [{ height: 'max-content' }],\n    /* field: { fontSize: '20px' }, */\n  };\n};\n\nexport const taskFieldCompletedStyle = () => {\n  return {\n    field: {\n      /* fontSize: '16px', */\n      textDecoration: 'line-through',\n      backgroundColor: 'transparent',\n    },\n  };\n};\n\n/* Checkmark */\nexport const taskCheckmarkStyle = (\n  props: ICheckboxStyleProps\n): Partial<ICheckboxStyles> => {\n  const { checked } = props;\n  return {\n    checkbox: {\n      width: '30px',\n      height: '30px',\n      borderRadius: '100px',\n      backgroundColor: 'transparent',\n    },\n    ...(checked && {\n      checkbox: {\n        border: '1px solid #09a50966!important',\n        width: '30px',\n        height: '30px',\n        borderRadius: '100px',\n        backgroundColor: 'transparent!important',\n      },\n    }),\n    checkmark: {\n      color: 'green',\n      fontSize: '20px',\n    },\n  };\n};\n","import React, { useState, useRef, useEffect } from 'react';\nimport { Stack, Checkbox, TextField, IconButton } from '@fluentui/react';\n\n/* Styles */\nimport {\n  taskItemWrapperStyle,\n  taskCheckmarkStyle,\n  taskFieldStyle,\n  taskFieldCompletedStyle,\n  btnTaskRemove,\n} from '../../styles/fulid_ui/components';\n\n/* Types */\nimport { IlistProps } from '../../types';\n\nconst ListItem: React.FunctionComponent<IlistProps> = ({\n  id,\n  task,\n  completed,\n  toggleTask,\n  upadateTask,\n  deleteTask,\n}) => {\n  const [modify, setModify] = useState<boolean>(false);\n  const [inputVal, setInputVal] = useState<string>(task);\n\n  const timesTouched = useRef<number>(0);\n  const timer = useRef<any>(null);\n\n  /* ***************************************** */\n  const updateText = (e: any): void => {\n    setInputVal(e.target.value);\n  };\n  const getKey = (key: string): void => {\n    if (key === 'Enter') {\n      upadateTask(id, inputVal);\n      setModify(false);\n    }\n  };\n\n  const useDoubleTouch = () => {\n    const isDoubleClicked = timesTouched.current + 1 === 2;\n    const timerIsPresent = timer.current;\n\n    if (timerIsPresent && isDoubleClicked) {\n      clearTimeout(timer.current);\n      timer.current = null;\n      timesTouched.current = 0;\n      setModify(!modify);\n    }\n\n    if (!timerIsPresent) {\n      timesTouched.current = +1;\n      const currentTimer = setTimeout(() => {\n        clearTimeout(timer.current);\n        timer.current = null;\n        timesTouched.current = 0;\n      }, 200);\n\n      timer.current = currentTimer;\n    }\n  };\n\n  /* ***************************************** */\n  return (\n    <div className=\"taskItem\">\n      <Stack\n        id={String(id)}\n        horizontal\n        verticalAlign=\"center\"\n        tokens={{ padding: 10, childrenGap: 5 }}\n        styles={taskItemWrapperStyle}\n      >\n        <Checkbox\n          checked={completed}\n          onChange={() => toggleTask(id)}\n          styles={taskCheckmarkStyle}\n        />\n\n        <TextField\n          value={inputVal}\n          onChange={updateText}\n          readOnly={modify ? false : true}\n          onDoubleClick={() => setModify(!modify)}\n          onTouchEnd={useDoubleTouch}\n          onKeyPress={(e: any) => getKey(e.key)}\n          borderless\n          autoComplete=\"off\"\n          disabled={completed}\n          styles={completed ? taskFieldCompletedStyle : taskFieldStyle}\n        />\n\n        <IconButton\n          className=\"taskItemRemoveButton\"\n          iconProps={{ iconName: 'Cancel' }}\n          styles={btnTaskRemove()}\n          onClick={() => deleteTask(id)}\n        />\n      </Stack>\n    </div>\n  );\n};\n\nexport default ListItem;\n","import React from 'react';\nimport { Stack, Text } from '@fluentui/react';\n\nimport { DefaultButton } from '@fluentui/react/lib/Button';\nimport {\n  btnFilterActiveStyle,\n  btnFilterDefaultStyle,\n  filterWrapperStyle,\n} from '../../styles/fulid_ui/components';\n\n/* Types */\nimport { IBottomFilterProps } from '../../types';\n\nconst BottomFilter: React.FunctionComponent<IBottomFilterProps> = ({\n  howMuchLeft,\n  filterState,\n  filterTasks,\n  clearCompletedTasks,\n}) => {\n  return (\n    <Stack\n      wrap\n      horizontal\n      verticalAlign=\"center\"\n      tokens={{ childrenGap: 5, padding: 10 }}\n      horizontalAlign=\"space-between\"\n      styles={filterWrapperStyle}\n    >\n      <Text>{howMuchLeft} items left</Text>\n      {/* Filter */}\n      <Stack horizontal wrap>\n        <div className=\"appWrapperButtonsWrapper\">\n          <DefaultButton\n            text=\"All\"\n            styles={\n              filterState === 'All'\n                ? btnFilterActiveStyle()\n                : btnFilterDefaultStyle()\n            }\n            onClick={() => filterTasks('All')}\n          />\n\n          <DefaultButton\n            text=\"Active\"\n            styles={\n              filterState === 'Active'\n                ? btnFilterActiveStyle()\n                : btnFilterDefaultStyle()\n            }\n            onClick={() => filterTasks('Active')}\n          />\n\n          <DefaultButton\n            text=\"Completed\"\n            styles={\n              filterState === 'Completed'\n                ? btnFilterActiveStyle()\n                : btnFilterDefaultStyle()\n            }\n            onClick={() => filterTasks('Completed')}\n          />\n\n          <DefaultButton\n            className=\"buttonsWrapperButton\"\n            text=\"Clear completed\"\n            onClick={clearCompletedTasks}\n            styles={btnFilterDefaultStyle()}\n          />\n        </div>\n      </Stack>\n    </Stack>\n  );\n};\n\nexport default BottomFilter;\n","import React, { useState, useRef, useEffect } from 'react';\nimport { Stack, Text, TextField } from '@fluentui/react';\nimport { initializeIcons } from '@uifabric/icons';\nimport { IconButton } from '@fluentui/react/lib/Button';\n\n/* Styles */\nimport {\n  mainCaptionStyle,\n  addTaskWrapperStyle,\n  btnSelectAllStyle,\n  textFieldAddStyle,\n  taskMessageWrapperStyle,\n} from '../styles/fulid_ui/components';\n\n/* Components */\nimport ListItem from './components/ListItem';\nimport BottomFilter from './components/BottomFilter';\n/* Types */\nimport { ITaskItem } from '../types';\n\n/* Helpers */\nimport { checkState } from '../helpers/checkState';\n\ninitializeIcons();\n\nexport const App: React.FunctionComponent<any> = () => {\n  const [buffer, setBuffer] = useState<ITaskItem[]>([]);\n  const [tasks, setTasks] = useState<ITaskItem[]>([]);\n  const [taskInput, setTaskInput] = useState<string>('');\n  const [howMuchLeft, setHowMuchLeft] = useState<number>(0);\n  const [filterState, setFilterState] = useState<string>('All');\n\n  const toggleAllStatus = useRef(true);\n\n  /* List Item Events: */\n  const addTask = (buttonPressed: string): void => {\n    if (buttonPressed === 'Enter') {\n      let newId = 1;\n      if (buffer.length > 0) {\n        newId = buffer[buffer.length - 1].id + 1;\n      }\n      const newTask: ITaskItem = {\n        id: newId,\n        task: taskInput,\n        completed: false,\n      };\n      setBuffer([...buffer, newTask]);\n      setTaskInput('');\n    }\n  };\n\n  const toggleTask = (id: number): void => {\n    filterTasks(filterState, id);\n    toggleAllStatus.current = true;\n  };\n\n  const toggleAll = () => {\n    const allTasks = buffer.map((task) => {\n      task.completed = toggleAllStatus.current;\n      return task;\n    });\n\n    toggleAllStatus.current = !toggleAllStatus.current;\n    setBuffer(allTasks);\n  };\n\n  const deleteTask = (id: number): void => {\n    const remainedTasks = buffer.filter((task) => task.id !== id);\n    setBuffer(remainedTasks);\n  };\n\n  const upadateTask = (id: number, text: string): void => {\n    const index = tasks.findIndex((el) => el.id === id);\n\n    tasks[index].task = text;\n    setTasks([...tasks]);\n  };\n  /* *********************** */\n\n  /* Bottom Filter Events: */\n  const filterTasks = (state: string, id?: number): void => {\n    setFilterState(state);\n\n    const filteredTasks = checkState(state, buffer, id);\n    setTasks(filteredTasks);\n    itemsLeftCounter();\n  };\n\n  const clearCompletedTasks = (): void => {\n    const resetCompletedTasks = buffer.filter(\n      (task) => task.completed !== true\n    );\n\n    setBuffer(resetCompletedTasks);\n    setFilterState('All');\n  };\n\n  /* *********************** */\n\n  /* Items Left Counter */\n  const itemsLeftCounter = () => {\n    const toComplete = buffer.filter((task) => task.completed === false);\n    setHowMuchLeft(toComplete.length);\n  };\n  /* *********************** */\n\n  useEffect(() => {\n    filterTasks(filterState);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [buffer]);\n\n  /* ************************************* */\n  return (\n    /* Wrapper */\n    <div className=\"appWrapper\">\n      <Stack>\n        <Text variant=\"mega\" styles={mainCaptionStyle()}>\n          todos\n        </Text>\n      </Stack>\n      {/* Header */}\n      <div className=\"appWrapperAddTask\">\n        <Stack\n          horizontal\n          verticalAlign=\"center\"\n          tokens={{ childrenGap: 5, padding: 5 }}\n          styles={addTaskWrapperStyle()}\n        >\n          {/* Button Check All */}\n\n          <IconButton\n            iconProps={{ iconName: 'ChevronDownSmall' }}\n            title=\"ChevronDownSmall\"\n            ariaLabel=\"ChevronDownSmall\"\n            styles={\n              buffer.length > 0 ? btnSelectAllStyle() : { root: { opacity: 0 } }\n            }\n            onClick={toggleAll}\n          />\n\n          {/* Input textfiled*/}\n          <Stack.Item align=\"center\" styles={{ root: { width: '100%' } }}>\n            <TextField\n              placeholder=\"What needs to be done?\"\n              value={taskInput}\n              onChange={(e: any) => setTaskInput(e.target.value)}\n              onKeyPress={(e: any) => addTask(e.key)}\n              borderless\n              autoComplete=\"off\"\n              styles={textFieldAddStyle}\n            />\n          </Stack.Item>\n        </Stack>\n      </div>\n\n      {/* To-do items wrapper*/}\n      <div\n        className={`appWrapperTasksContainer ${\n          buffer.length > 0 ? 'appWrapperTasksContainerShow' : ''\n        }`}\n      >\n        {/* Content */}\n        <div className=\"appWrapperTasksWrapper\">\n          {tasks &&\n            tasks.map((task) => {\n              return (\n                <ListItem\n                  key={task.id}\n                  id={task.id}\n                  task={task.task}\n                  completed={task.completed}\n                  upadateTask={upadateTask}\n                  toggleTask={toggleTask}\n                  deleteTask={deleteTask}\n                />\n              );\n            })}\n\n          {tasks.length === 0 && filterState === 'Active' && (\n            <Stack\n              horizontal\n              horizontalAlign=\"center\"\n              verticalAlign=\"center\"\n              styles={taskMessageWrapperStyle}\n            >\n              <Text variant=\"large\">Here is no active tasks to do.</Text>\n            </Stack>\n          )}\n          {tasks.length === 0 && filterState === 'Completed' && (\n            <Stack\n              horizontal\n              horizontalAlign=\"center\"\n              verticalAlign=\"center\"\n              styles={taskMessageWrapperStyle}\n            >\n              <Text variant=\"large\">Here is no completed tasks yet.</Text>\n            </Stack>\n          )}\n        </div>\n\n        {/* Footer Bar */}\n\n        <BottomFilter\n          howMuchLeft={howMuchLeft}\n          filterState={filterState}\n          filterTasks={filterTasks}\n          clearCompletedTasks={clearCompletedTasks}\n        />\n      </div>\n    </div>\n  );\n};\n","import { ITaskItem } from '../types';\nexport const checkState = (\n  state: string,\n  listToCheck: ITaskItem[],\n  id?: number\n): ITaskItem[] => {\n  let filteredTasks;\n  switch (state) {\n    case 'Active':\n      filteredTasks = listToCheck\n        .map((task) => {\n          if (task.id === id) task.completed = true;\n          return task;\n        })\n        .filter((task) => task.completed === false);\n\n      break;\n    case 'Completed':\n      filteredTasks = listToCheck\n        .map((task) => {\n          if (task.id === id) task.completed = false;\n          return task;\n        })\n        .filter((task) => task.completed === true);\n      break;\n    default:\n      filteredTasks = listToCheck.map((el) => {\n        if (el.id === id) el.completed = !el.completed;\n        return el;\n      });\n      break;\n  }\n  return filteredTasks;\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './ui/App';\nimport './index.scss';\n//import { mergeStyles } from '@fluentui/react';\n\nimport reportWebVitals from './reportWebVitals';\n/* mergeStyles({\n  ':global(body,html,#root)': {\n    margin: 0,\n    padding: 0,\n    boxSizing: 'border-box',\n    minWidth: '100%',\n    width: '100vw',\n    maxWidth: '100%',\n\n    minHeight: '100%',\n    height: '100vh',\n    maxHidth: '100%',\n  },\n  ':global(#root)': {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n}); */\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}